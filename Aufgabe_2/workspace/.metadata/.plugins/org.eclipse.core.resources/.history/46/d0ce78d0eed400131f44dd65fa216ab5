package server;

import java.util.HashMap;

import koordinator.Nachricht;
import koordinator.NachrichtenTyp;
import koordinator.Starter;
import koordinator.ggT_Prozess;

public class KoordinatorThread implements Runnable {
    private boolean run;
    private int min;
    private int max;
    private int min_delay;
    private int max_delay;
    private int terminierungs_periode;
    private int ggt;
    private KoordinatorImpl koordinator_ref;

    public KoordinatorThread(KoordinatorImpl koordinator_ref, int min, int max, int min_delay, int max_delay, int terminierungs_periode, int ggt) {
        this.koordinator_ref = koordinator_ref;
        this.min = min;
        this.max = max;
        this.min_delay = min_delay;
        this.max_delay = max_delay;
        this.terminierungs_periode = terminierungs_periode;
        this.ggt = ggt;
    }

    @Override
    public void run() {
        int anz_rand = (int) (Math.random() * max + min + 1);
        HashMap<String, Starter> starterMap = koordinator_ref.getStarterMap();
        HashMap<String, ggT_Prozess> ggT_ProzessMap = koordinator_ref.getGgT_ProzessMap();

        for (String it : starterMap.keySet()) {
            starterMap.get(it).start_ggT_Prozess(min_delay, max_delay, anz_rand);
            koordinator_ref.addMax_ggt_prozesse(anz_rand);
        }

        koordinator_ref.createRing(this.ggt);

        ggT_Prozess rand_ggT_Prozess = null;
        int rand = 0;
        int sequenz = 1;

        // suche zufaehlingen Prozess und starte Terminierungsabfrage.
        while (this.run) {
            rand = (int) Math.random() * ggT_ProzessMap.size() + 1;
            Nachricht msg = new Nachricht();
            msg.typ = NachrichtenTyp.MARKER;
            msg.sequenz = sequenz;

            try {
                this.wait(terminierungs_periode);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            for (int i = 0; i < rand; i++) {
                rand_ggT_Prozess = rand_ggT_Prozess.getRechterNachbar();
            }

            rand_ggT_Prozess.addLinkerChannel(msg);
            
//            if (koordinator_ref.isTerminiert()) {
//                run = false;
//                koordinator_ref.beendeProzesse();
//            }
            
            sequenz++;
        }
    }

    void setRun(boolean run) {
        this.run = run;
    }

}
