package sensor;

import hawmetering.HAWMeteringWebservice;
import hawmetering.HAWMeteringWebserviceService;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Date;
import java.util.HashMap;
import java.util.Timer;
import java.util.concurrent.locks.ReentrantLock;

import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.jws.soap.SOAPBinding.Style;
import javax.xml.ws.BindingProvider;

import net.java.dev.jaxb.array.StringArray;
import web_sensor.SensorService;
import web_sensor.WebSensor;

import com.sun.xml.internal.ws.client.BindingProviderProperties;

@WebService(name = "WebSensor", targetNamespace = "web_sensor")
@SOAPBinding(style = Style.RPC)
public class Sensor {
    private final String DISPLAY_URL = "http://127.0.0.1:9999/hawmetering/";
    private final int REQUEST_TIME = 3000;
    private final int CONNECT_TIME = 3000;
    private final int DELAY = 2000;
    private final int TOLERANZ = 1 * REQUEST_TIME; // 4 Sekunden wegen 4
                                                   // anzeigen und 4 moeglliche
                                                   // timeouts

    private volatile boolean koordinator_wahl;
    private String sensor_id;
    private String koordinator_id;
    private Timer wahl_timer;
    private Timer trigger_timmer;
    private WahlAlgorithmus wahl_task;
    private ReentrantLock map_lock = new ReentrantLock();
    private HashMap<String, String[]> sensoren_display_map = new HashMap<String, String[]>();
    private HashMap<String, WebSensor> sensoren_service_map = new HashMap<String, WebSensor>();
    private HashMap<String, Boolean> display_belegung = new HashMap<String, Boolean>();
    private HashMap<String, HAWMeteringWebservice> display_service_map = new HashMap<String, HAWMeteringWebservice>();

    public Sensor(@WebParam(name = "sensor_id") String sensor_id, @WebParam(name = "display_id") String[] display_id) {
        this.sensor_id = sensor_id;
        this.koordinator_id = sensor_id;
        this.trigger_timmer = new Timer();
        this.wahl_timer = new Timer();
    }

    public Sensor(@WebParam(name = "sensor_id") String sensor_id, @WebParam(name = "koordinator_id") String koordinator_id) {
        this.sensor_id = sensor_id;
        this.koordinator_id = koordinator_id;
        this.trigger_timmer = new Timer();
        this.wahl_timer = new Timer();
    }

    protected void initDisplays() {
        HAWMeteringWebservice display;
        URL location;
        HAWMeteringWebserviceService service;

        String names[] = { "nw", "no", "sw", "so" };
        for (int i = 0; i < names.length; i++) {
            try {
                location = new URL(DISPLAY_URL + names[i]);
                service = new HAWMeteringWebserviceService(location);
                display = service.getHAWMeteringWebservicePort();
                
                ((BindingProvider) display).getRequestContext().put(BindingProviderProperties.REQUEST_TIMEOUT, REQUEST_TIME);
                ((BindingProvider) display).getRequestContext().put(BindingProviderProperties.CONNECT_TIMEOUT, CONNECT_TIME);
                
                display_service_map.put(DISPLAY_URL + names[i], display);
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
            this.display_belegung.put(DISPLAY_URL + names[i], false);
        }
    }

    protected void startKoordinatorTimer() {
        System.out.println("Ich bin jetzt Koordinator!");
        trigger_timmer.schedule(new DisplayRefresh(this, this.sensor_id, this.sensoren_service_map, this.sensoren_display_map), DELAY, DELAY);
    }

    protected void startWahlTimer() {
        wahl_task = new WahlAlgorithmus(this, this.sensor_id, this.sensoren_service_map);
        this.wahl_timer.schedule(wahl_task, DELAY + TOLERANZ);
    }

    protected void stopWahlTimer() {
        wahl_task.cancel();
        this.wahl_timer.purge();
    }

    public synchronized void anmelden(@WebParam(name = "sensor_id") String sensor_id, @WebParam(name = "display_id") String[] display_id)
            throws DisplayWirdVerwendetException, DisplayNichtBekanntException, URLVergebenException, KoordinatorWahlException {

        
        // pruefen ob URL sich noch im System befindet! wenn ja wird sie in ca
        // 2s geloescht!
        if (this.display_belegung.containsKey(sensor_id)) {
            throw new URLVergebenException(sensor_id + " : URL ist bald verfuegbar! Bitte erneut versuchen!");
        }

        if (koordinator_wahl) {
            throw new KoordinatorWahlException("Koordinator wird momentan ermittelt!");
        }

        // pruefen ob display existiert und wenn ja ob sie frei ist.
        for (int i = 0; i < display_id.length; i++) {
            if (display_belegung.containsKey(display_id[i])) {
                if (display_belegung.get(display_id[i])) {
                    this.map_lock.unlock();
                    throw new DisplayWirdVerwendetException(display_id[i] + " : wird verwendet!");
                }
            } else {
                this.map_lock.unlock();
                throw new DisplayNichtBekanntException(display_id[i] + " : nicht bekannt!");
            }
        }

        addSensor(sensor_id, display_id);
        updateSensorMap(sensor_id, display_id, true);

        // neuen Sensor aktuellen Zustand mitteilen
        URL location;
        try {
            location = new URL(sensor_id);
            SensorService service = new SensorService(location);
            WebSensor sensor = service.getWebSensorPort();
            for (String it : this.sensoren_display_map.keySet()) {
                sensor.addSensor(it, getStringArray(this.sensoren_display_map.get(it)));
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }

        System.out.println(sensor_id + " hat sich Angemeldet!");
    }

    protected synchronized void updateSensorMap(String sensor_id, String[] display_id, boolean add) {
        StringArray displays = getStringArray(display_id);
        this.map_lock.lock();
        for (String it : this.sensoren_service_map.keySet()) {

            try {
                if (!it.equals(sensor_id)) {
                    if (add) {
                        this.sensoren_service_map.get(it).addSensor(sensor_id, displays);
                    } else {
                        this.sensoren_service_map.get(it).removeSensor(sensor_id, displays);
                    }
                }
            } catch (Exception e) {
                // wird beim naechsten triggern rausgeworfen
            }
        }
        this.map_lock.unlock();
    }

    protected StringArray getStringArray(String[] display_id) {
        StringArray displays_array = new StringArray();

        for (int i = 0; i < display_id.length; i++) {
            displays_array.getItem().add(display_id[i]);
        }

        return displays_array;
    }

    public synchronized void addSensor(@WebParam(name = "sensor_id") String sensor_id, @WebParam(name = "display_id") String[] display_id) {
        this.map_lock.lock();
        if (!this.sensor_id.equals(koordinator_id)) {
            stopWahlTimer();
            startWahlTimer();
        }

        if (sensor_id != null && display_id != null) {
            if (!this.sensoren_service_map.containsKey(sensor_id)) {
                try {
                    URL location = new URL(sensor_id);
                    SensorService service = new SensorService(location);
                    WebSensor sensor = service.getWebSensorPort();

                    ((BindingProvider) sensor).getRequestContext().put(BindingProviderProperties.REQUEST_TIMEOUT, REQUEST_TIME);
                    ((BindingProvider) sensor).getRequestContext().put(BindingProviderProperties.CONNECT_TIMEOUT, CONNECT_TIME);

                    this.sensoren_service_map.put(sensor_id, sensor);
                    this.sensoren_display_map.put(sensor_id, display_id);
                    updateDisplaysBelegung(display_id, true);
                    System.out.println(sensor_id + " wurde hinzugefuegt!");
                } catch (MalformedURLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
        this.map_lock.unlock();
    }

    public synchronized void removeSensor(@WebParam(name = "sensor_id") String sensor_id, @WebParam(name = "display_id") String[] display_id) {
        this.map_lock.lock();
        if (!this.sensor_id.equals(koordinator_id)) {
            stopWahlTimer();
            startWahlTimer();
        }

        if (sensor_id != null && display_id != null) {
            if (this.sensoren_service_map.containsKey(sensor_id)) {
                this.sensoren_service_map.remove(sensor_id);
                this.sensoren_display_map.remove(sensor_id);
                updateDisplaysBelegung(display_id, false);
                System.out.println(sensor_id + " wurde entfernt!");
            }
        }
        this.map_lock.unlock();
    }

    private synchronized void updateDisplaysBelegung(String display_id[], boolean value) {
        for (int i = 0; i < display_id.length; i++) {
            if (display_belegung.containsKey(display_id[i])) {
                display_belegung.put(display_id[i], value);
            }
        }
    }

    @WebResult(name = "koordinator_id")
    public String getKoordinator_id() throws KoordinatorWahlException {
        if (this.koordinator_wahl) {
            throw new KoordinatorWahlException("Koordinator wird momentan ermittelt!");
        }

        return koordinator_id;
    }

    protected void setKoordinator_id(String koordinator_id) {
        this.koordinator_id = koordinator_id;
    }

    // @WebMethod
    // @Oneway
    public void trigger() {
        this.map_lock.lock();
        if (!this.sensor_id.equals(koordinator_id)) {
            stopWahlTimer();
            startWahlTimer();
        }

        String display_id[] = this.sensoren_display_map.get(sensor_id);

        int messwert = 0;

        for (int i = 0; i < display_id.length; i++) {
            try {
                Thread.sleep(300);
            } catch (InterruptedException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
            long lTicks = new Date().getTime();
            messwert = ((int) (lTicks % 20000)) / 100;
            if (messwert > 100) {
                messwert = 200 - messwert;
            }

            try {
                this.display_service_map.get(display_id[i]).setValue(messwert);
            } catch (Exception e) {
                System.err.println(display_id[i] + " nicht erreichbar!");
            }
        }
    }

    protected ReentrantLock getMap_lock() {
        return map_lock;
    }

    protected void setKoordinator_wahl(boolean koordinator_wahl) {
        this.koordinator_wahl = koordinator_wahl;
    }
    this.map_lock.unlock();
}
