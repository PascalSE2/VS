package server;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

import koordinator.KoordinatorPOA;
import koordinator.Nachricht;
import koordinator.NachrichtenTyp;
import koordinator.Starter;
import koordinator.ggT_Prozess;
import koordinator.KoordinatorPackage.EKoordinatorInUse;
import koordinator.monitor.Monitor;

public class KoordinatorImpl extends KoordinatorPOA {

    private final int anz_beginner = 3;

    private HashMap<String, Starter> starterMap = new HashMap<>();
    private HashMap<String, ggT_Prozess> ggT_ProzessMap = new HashMap<>();
    private HashMap<String, Nachricht> terminierungsMap = new HashMap<>();

    ReentrantLock ggt_process_lock = new ReentrantLock();
    ReentrantLock starter_lock = new ReentrantLock();
    ReentrantLock terminierungs_lock = new ReentrantLock();
    Condition wait_for_all_process = ggt_process_lock.newCondition();
    Condition wait_for_all_answers = terminierungs_lock.newCondition();

    KoordinatorThread terminierung;
    private Monitor monitor;
    
    private ggT_Prozess head;
    private ggT_Prozess tail;
    private int max_ggt_prozesse;
    private boolean run;

    

    public void ggT_ProzessAnmeldung(String name_id, ggT_Prozess p) {
        ggt_process_lock.lock();

        if (name_id != null && p != null) {
            if (!ggT_ProzessMap.containsKey(name_id)) {
                ggT_ProzessMap.put(name_id, p);
            }
        }

        if (max_ggt_prozesse == ggT_ProzessMap.size()) {
            wait_for_all_process.signal();
        }

        ggt_process_lock.unlock();
    }

    public void ggT_ProzessAbmeldung(String name_id) {
        ggt_process_lock.lock();
        Scanner scan;
        ggT_Prozess temp;

        if (name_id != null) {
            if (ggT_ProzessMap.containsKey(name_id)) {
                scan = new Scanner(name_id);
                this.starterMap.get(scan.next()).destroy(Integer.parseInt(scan.next()));
                temp = ggT_ProzessMap.remove(name_id);
                removeProcessFromRing(temp);
                this.max_ggt_prozesse--;
            }
        }

        ggt_process_lock.unlock();
    }

    public void starterAnmeldung(String name, Starter p) {
        starter_lock.lock();

        if (name != null && p != null) {
            if (!starterMap.containsKey(name)) {
                starterMap.put(name, p);
            }
        }

        starter_lock.unlock();
    }

    public void starterAbmeldung(String name) {
        starter_lock.lock();

        if (name != null) {
            if (starterMap.containsKey(name)) {
                starterMap.remove(name);
            }
        }

        starter_lock.unlock();
    }

    public void meldeTerminierungsStatus(String name_id, Nachricht msg) {
        terminierungs_lock.lock();

        if (name_id != null) {
            if (ggT_ProzessMap.containsKey(name_id) && !terminierungsMap.containsKey(name_id)) {
                terminierungsMap.put(name_id, msg);
            }
        }

        if (this.max_ggt_prozesse == terminierungsMap.size()) {

            wait_for_all_answers.signal();

        }

        terminierungs_lock.unlock();
    }

    public boolean isTerminiert() {
        boolean terminiert = true;

        try {
            wait_for_all_answers.wait();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        for (String it : terminierungsMap.keySet()) {
            if (!terminierungsMap.get(it).terminierung) {
                terminiert = false;
                break;
            }
        }

        if (terminiert) {
            this.max_ggt_prozesse = 0;
            this.terminierung.setRun(false);
        }

        return terminiert;
    }

    public void startBerechnung(int min, int max, int min_delay, int max_delay, int terminierungs_periode, int ggt) throws EKoordinatorInUse {

        if (this.run) {
            terminierung = new KoordinatorThread(this, min, max, min_delay, max_delay, terminierungs_periode, ggt);
            Thread thread = new Thread(terminierung);
            thread.start();
            run = true;
        } else {
            throw new EKoordinatorInUse("Es laeuft bereits eine Berechnung!");
        }

    }

    public void createRing(int ggt) {
        int beginner_value[] = new int[anz_beginner];
        ggT_Prozess beginner_process[] = new ggT_Prozess[anz_beginner];
        Nachricht msg = new Nachricht();
        try {
            wait_for_all_process.wait();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        List<ggT_Prozess> rand_ggt = new ArrayList<>(ggT_ProzessMap.values());
        Collections.shuffle(rand_ggt);

        int value_temp_1 = 0;
        int value_temp_2 = 0;
        ggT_Prozess process_temp_1 = null;
        ggT_Prozess process_temp_2 = null;

        // Aufbau des Rings
        for (ggT_Prozess it : rand_ggt) {
            value_temp_1 = (int) (ggt * (Math.random() * 100 + 1) * (Math.random() * 100 + 1));
            it.set_ggT(value_temp_1);
            process_temp_1 = it;

            addProcessToRing(it);

            // Ermittlung der 3 kleinsten ggT´s
            for (int i = 0; i < beginner_value.length; i++) {
                if (beginner_value[i] == 0) {
                    beginner_value[i] = value_temp_1;
                    beginner_process[i] = it;
                } else {
                    if (beginner_value[i] < value_temp_1) {
                        value_temp_2 = beginner_value[i];
                        beginner_value[i] = value_temp_1;
                        value_temp_1 = value_temp_2;

                        process_temp_2 = beginner_process[i];
                        beginner_process[i] = process_temp_1;
                        process_temp_1 = process_temp_2;
                    }
                }
            }
        }
        msg.typ = NachrichtenTyp.START;
        for (int i = 0; i < beginner_process.length; i++) {
            beginner_process[i].addLinkerChannel(msg);
        }

    }

    private void addProcessToRing(ggT_Prozess p) {
        // Ring Implementation: Prozess hinzufuegen
        if (this.head == null && this.tail == null) {
            this.head = p;
            this.tail = p;
        } else {
            p.setLinkerNachbar(this.tail);
            p.setRechterNachbar(this.head);
            this.tail.setRechterNachbar(p);
            this.tail = p;
        }
    }

    private void removeProcessFromRing(ggT_Prozess p) {
        // Ring Implementation: Prozess hinzufuegen
        if (ringContains(p)) {
            if (p == this.head && p == this.tail) {
                this.head = null;
                this.tail = null;
            } else {

                if (p == this.head) {
                    this.head = p.getRechterNachbar();
                } else if (p == this.tail) {
                    this.tail = p.getLinkerNachbar();
                }

                p.getLinkerNachbar().setRechterNachbar(p.getRechterNachbar());
                p.getRechterNachbar().setLinkerNachbar(p.getLinkerNachbar());
            }
        }
    }

    private boolean ringContains(ggT_Prozess p) {
        boolean contains = false;
        ggT_Prozess temp = this.head;

        // prueft ob process Teil der liste ist.

        while (temp != this.tail) {
            if (temp == p) {
                contains = true;
            }
            temp = temp.getRechterNachbar();
        }

        return contains;
    }

    public String[] getStarterListe() {
        String[] liste = new String[starterMap.size()];
        int i = 0;
        for (String it : starterMap.keySet()) {
            liste[i] = it;
            i++;
        }

        return liste;
    }

    public void beendeProzesse() {
        for (String it : this.starterMap.keySet()) {
            this.starterMap.get(it).destroyAll();
        }
    }

    public HashMap<String, Starter> getStarterMap() {
        return starterMap;
    }

    public HashMap<String, ggT_Prozess> getGgT_ProzessMap() {
        return ggT_ProzessMap;
    }

    public void addMax_ggt_prozesse(int max_ggt_prozesse) {
        this.max_ggt_prozesse += max_ggt_prozesse;
    }

    public void clearTerminierungsMap() {
        this.terminierungsMap.clear();
    }
    
    @Override
    public void setMonitor(Monitor m) {
        this.monitor = m;
        
    }

    public void exit() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                System.exit(0);
            }
        }).start();
    }

}
