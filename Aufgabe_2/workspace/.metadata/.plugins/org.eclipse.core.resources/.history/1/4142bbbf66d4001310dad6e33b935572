package koordinator;


/**
* koordinator/KoordinatorPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Koordinator.idl
* Montag, 5. Mai 2014 17:04 Uhr MESZ
*/

public abstract class KoordinatorPOA extends org.omg.PortableServer.Servant
 implements koordinator.KoordinatorOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("ggT_ProzessAnmeldung", new java.lang.Integer (0));
    _methods.put ("ggT_ProzessAbmeldung", new java.lang.Integer (1));
    _methods.put ("starterAnmeldung", new java.lang.Integer (2));
    _methods.put ("starterAbmeldung", new java.lang.Integer (3));
    _methods.put ("meldeTerminierungsStatus", new java.lang.Integer (4));
    _methods.put ("startBerechnung", new java.lang.Integer (5));
    _methods.put ("getStarterListe", new java.lang.Integer (6));
    _methods.put ("setMonitor", new java.lang.Integer (7));
    _methods.put ("exit", new java.lang.Integer (8));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // koordinator/Koordinator/ggT_ProzessAnmeldung
       {
         String name_id = in.read_string ();
         koordinator.ggT_Prozess p = koordinator.ggT_ProzessHelper.read (in);
         this.ggT_ProzessAnmeldung (name_id, p);
         out = $rh.createReply();
         break;
       }

       case 1:  // koordinator/Koordinator/ggT_ProzessAbmeldung
       {
         String name_id = in.read_string ();
         this.ggT_ProzessAbmeldung (name_id);
         out = $rh.createReply();
         break;
       }

       case 2:  // koordinator/Koordinator/starterAnmeldung
       {
         String name = in.read_string ();
         koordinator.Starter p = koordinator.StarterHelper.read (in);
         this.starterAnmeldung (name, p);
         out = $rh.createReply();
         break;
       }

       case 3:  // koordinator/Koordinator/starterAbmeldung
       {
         String name = in.read_string ();
         this.starterAbmeldung (name);
         out = $rh.createReply();
         break;
       }

       case 4:  // koordinator/Koordinator/meldeTerminierungsStatus
       {
         String name_id = in.read_string ();
         koordinator.Nachricht msg = koordinator.NachrichtHelper.read (in);
         this.meldeTerminierungsStatus (name_id, msg);
         out = $rh.createReply();
         break;
       }

       case 5:  // koordinator/Koordinator/startBerechnung
       {
         try {
           int min = in.read_long ();
           int max = in.read_long ();
           int min_delay = in.read_long ();
           int max_delay = in.read_long ();
           int terminierungs_periode = in.read_long ();
           int ggt = in.read_long ();
           this.startBerechnung (min, max, min_delay, max_delay, terminierungs_periode, ggt);
           out = $rh.createReply();
         } catch (koordinator.KoordinatorPackage.EKoordinatorInUse $ex) {
           out = $rh.createExceptionReply ();
           koordinator.KoordinatorPackage.EKoordinatorInUseHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // koordinator/Koordinator/getStarterListe
       {
         String $result[] = null;
         $result = this.getStarterListe ();
         out = $rh.createReply();
         koordinator.StarterListeHelper.write (out, $result);
         break;
       }

       case 7:  // koordinator/Koordinator/setMonitor
       {
         koordinator.monitor.Monitor m = koordinator.monitor.MonitorHelper.read (in);
         this.setMonitor (m);
         out = $rh.createReply();
         break;
       }

       case 8:  // koordinator/Koordinator/exit
       {
         this.exit ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:koordinator/Koordinator:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Koordinator _this() 
  {
    return KoordinatorHelper.narrow(
    super._this_object());
  }

  public Koordinator _this(org.omg.CORBA.ORB orb) 
  {
    return KoordinatorHelper.narrow(
    super._this_object(orb));
  }


} // class KoordinatorPOA
