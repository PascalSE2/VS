package server;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

import koordinator.KoordinatorPOA;
import koordinator.Nachricht;
import koordinator.NachrichtenTyp;
import koordinator.Starter;
import koordinator.ggT_Prozess;
import koordinator.KoordinatorPackage.EKoordinatorInUse;
import koordinator.monitor.Monitor;

public class KoordinatorImpl extends KoordinatorPOA {

    private final int anz_beginner = 3;

    private HashMap<String, Starter> starterMap = new HashMap<>();
    private HashMap<String, ggT_Prozess> ggT_ProzessMap = new HashMap<>();
    private HashMap<String, Nachricht> terminierungsMap = new HashMap<>();

    private ReentrantLock ggt_process_lock = new ReentrantLock();
    private ReentrantLock starter_lock = new ReentrantLock();
    private ReentrantLock terminierungs_lock = new ReentrantLock();
    private Condition wait_for_all_process = ggt_process_lock.newCondition();
//    private Condition wait_for_all_answers = terminierungs_lock.newCondition();
    private LinkedBlockingQueue<Nachricht> terminierungs_queue = new LinkedBlockingQueue<Nachricht>();

    private String[] prozess_ids;
    private int[] prozess_ggts;

    private KoordinatorThread start_terminierung;
    private CheckTerminierungThread check_terminierung;
    private Monitor monitor;

    private ggT_Prozess head;
    private ggT_Prozess tail;
    private int max_ggt_prozesse;
    private int sequenz_nummer;
    private boolean run;

    public void ggT_ProzessAnmeldung(String name_id, ggT_Prozess p) {
        ggt_process_lock.lock();
        terminierungs_lock.lock();
        
        if (name_id != null && p != null) {
            if (!ggT_ProzessMap.containsKey(name_id)) {
                System.out.println("Prozess " + name_id + " meldet sich an!");
                ggT_ProzessMap.put(name_id, p);
                p.setMonitor(this.monitor);
            }
        }

        if (max_ggt_prozesse == ggT_ProzessMap.size()) {
            wait_for_all_process.signal();
        }
        
        terminierungs_lock.unlock();
        ggt_process_lock.unlock();
    }

    public void ggT_ProzessAbmeldung(String name_id) {
        ggt_process_lock.lock();
        terminierungs_lock.lock();
//        Scanner scan;
        ggT_Prozess temp;
        if (name_id != null) {
            if (ggT_ProzessMap.containsKey(name_id)) {
                System.out.println("ggT Prozess " + name_id + " meldet sich ab!");
//                scan = new Scan/ner(name_id);
//                this.starterMap.get(scan.next()).destroy(Integer.parseInt(scan.next()));
                temp = ggT_ProzessMap.remove(name_id);
                removeProcessFromRing(temp);
                this.max_ggt_prozesse--;
            }
        }
        if (max_ggt_prozesse == 0) {
            reset();
        }
        terminierungs_lock.unlock();
        ggt_process_lock.unlock();
    }

    public void starterAnmeldung(String name, Starter p) {
        starter_lock.lock();
        terminierungs_lock.lock();
        if (name != null && p != null) {
            if (!starterMap.containsKey(name)) {
                System.out.println("Starter " + name + " meldet sich an!");
                starterMap.put(name, p);
            }
        }
        terminierungs_lock.unlock();
        starter_lock.unlock();
    }

    public void starterAbmeldung(String name) {
        starter_lock.lock();
        terminierungs_lock.lock();
        if (name != null) {
            if (starterMap.containsKey(name)) {
                System.out.println("Starter " + name + " meldet sich ab!");
                starterMap.remove(name);
            }
        }
        terminierungs_lock.unlock();
        starter_lock.unlock();
    }

    public void meldeTerminierungsStatus(Nachricht msg) {
        terminierungs_lock.lock();
        if (msg != null) {
            this.terminierungs_queue.add(msg);
        }
        terminierungs_lock.unlock();
    }

    public boolean checkTerminierung(Nachricht msg) {
        boolean terminiert = false;
        
        this.monitor.terminieren(msg.name_id, id, msg.terminierung);
        if (msg.name_id != null) {
            if (ggT_ProzessMap.containsKey(msg.name_id) && !terminierungsMap.containsKey(msg.name_id)) {
                if (msg.sequenz == sequenz_nummer) {
                    terminierungsMap.put(msg.name_id, msg);
                } else if (msg.sequenz > sequenz_nummer) {

                    this.sequenz_nummer = msg.sequenz;
                    terminierungsMap.clear();
                    terminierungsMap.put(msg.name_id, msg);
                }
            }
        }

        if (this.max_ggt_prozesse == terminierungsMap.size()) {
            terminiert = true;
//            wait_for_all_answers.signal();
            for (String it : terminierungsMap.keySet()) {
                if (!terminierungsMap.get(it).terminierung) {
                    terminiert = false;
                    break;
                }
            }

            terminierungsMap.clear();

            if (terminiert) {
                this.ggT_ProzessMap.get(msg.name_id).printErgebnis();
                reset();
            }

        }

        return terminiert;
    }
    
    private void reset() {
        this.max_ggt_prozesse = 0;
        this.ggT_ProzessMap.clear();
        this.head = null;
        this.tail = null;
        this.run = false;
        this.start_terminierung.setRun(false);
        beendeProzesse();
        this.terminierungs_queue.clear();
        System.out.println("Berechnung Beendet!");
    }

//    public boolean isTerminiert() {
//        terminierungs_lock.lock();
//        boolean terminiert = true;
//
//        try {
//            wait_for_all_answers.await();
//        } catch (InterruptedException e) {
//            e.printStackTrace();
//        }
//
//        for (String it : terminierungsMap.keySet()) {
//            if (!terminierungsMap.get(it).terminierung) {
//                terminiert = false;
//                break;
//            }
//        }
//
//        terminierungsMap.clear();
//
//        if (terminiert) {
//            this.max_ggt_prozesse = 0;
//            this.ggT_ProzessMap.clear();
//            this.head = null;
//            this.tail = null;
//            this.run = false;
//            this.terminierung.setRun(false);
//        }
//        terminierungs_lock.unlock();
//        return terminiert;
//    }

    public void startBerechnung(int min, int max, int min_delay, int max_delay, int terminierungs_periode, int ggt) throws EKoordinatorInUse {

        if (!this.run) {
            start_terminierung = new KoordinatorThread(this, min, max, min_delay, max_delay, terminierungs_periode, ggt);
            Thread start_thread = new Thread(start_terminierung);
            start_thread.start();

            check_terminierung = new CheckTerminierungThread(terminierungs_queue, this);
            Thread check_thread = new Thread(check_terminierung);
            check_thread.start();

            run = true;
        } else {
            throw new EKoordinatorInUse("Es laeuft bereits eine Berechnung!");
        }

    }

    public void createRing(int ggt) {
        ggt_process_lock.lock();
        int beginner_value[] = new int[anz_beginner];
        ggT_Prozess beginner_process[] = new ggT_Prozess[anz_beginner];
        this.prozess_ids = new String[max_ggt_prozesse];
        this.prozess_ggts = new int[max_ggt_prozesse];

        int j = 0;

        try {
            wait_for_all_process.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        List<ggT_Prozess> rand_ggt = new ArrayList<>(ggT_ProzessMap.values());
        Collections.shuffle(rand_ggt);

        int value_temp_1 = 0;
        int value_temp_2 = 0;
        ggT_Prozess process_temp_1 = null;
        ggT_Prozess process_temp_2 = null;

        // Aufbau des Rings
        for (ggT_Prozess it : rand_ggt) {
            value_temp_1 = ggt * ((int) ((Math.random() * 100 + 1) * (Math.random() * 100 + 1)));
            it.set_ggT(value_temp_1);
            process_temp_1 = it;

            // init arrays fuer Monitor.
            prozess_ids[j] = it.getId();
            prozess_ggts[j] = value_temp_1;
            j++;

            addProcessToRing(it);

            // Ermittlung der 3 kleinsten ggT´s
            for (int i = 0; i < beginner_value.length; i++) {
                if ((beginner_value[i] > value_temp_1 || beginner_value[i] == 0) && value_temp_1 != 0) {
                    value_temp_2 = beginner_value[i];
                    beginner_value[i] = value_temp_1;
                    value_temp_1 = value_temp_2;

                    process_temp_2 = beginner_process[i];
                    beginner_process[i] = process_temp_1;
                    process_temp_1 = process_temp_2;
                }
            }
        }

        this.monitor.ring(prozess_ids);
        this.monitor.startzahlen(prozess_ggts);

        Nachricht msg = new Nachricht();
        msg.typ = NachrichtenTyp.START;
        msg.name_id = "";
        System.out.println(this.max_ggt_prozesse + "!!!!!!!!!!!!!!!!!!!!!");
        for (int i = 0; i < beginner_process.length; i++) {
            beginner_process[i].addLinkerChannel(msg);
        }

        System.out.println("Ring wurde erstellt");
        ggt_process_lock.unlock();
    }

    private void addProcessToRing(ggT_Prozess p) {
        // Ring Implementation: Prozess hinzufuegen
        if (this.head == null && this.tail == null) {
            this.head = p;
            this.tail = p;
        } else {
            this.head.setLinkerNachbar(p);
            p.setLinkerNachbar(this.tail);
            p.setRechterNachbar(this.head);
            this.tail.setRechterNachbar(p);
            this.tail = p;
        }
    }

    private void removeProcessFromRing(ggT_Prozess p) {
        // Ring Implementation: Prozess hinzufuegen
        String p_id = p.getId();
        String head_id;
        String tail_id;
        ggT_Prozess linker_nachbar;
        ggT_Prozess rechter_nachbar;
        if (ringContains(p_id)) {
            linker_nachbar = p.getLinkerNachbar();
            rechter_nachbar = p.getRechterNachbar();

            p_id = p.getId();
            head_id = this.head.getId();
            tail_id = this.tail.getId();

            if (p_id.equals(head_id) && p_id.equals(tail_id)) {
                this.head = null;
                this.tail = null;
            } else {

                if (linker_nachbar.getId().equals(rechter_nachbar.getId())) {
                    this.head = linker_nachbar;
                    this.tail = linker_nachbar;
                } else {
                    if (p_id.equals(head_id)) {
                        this.head = p.getRechterNachbar();
                    }
                    if (p_id.equals(tail_id)) {
                        this.tail = p.getLinkerNachbar();
                    }
                    p.getLinkerNachbar().setRechterNachbar(p.getRechterNachbar());
                    p.getRechterNachbar().setLinkerNachbar(p.getLinkerNachbar());

                }

            }
        }
    }

    private boolean ringContains(String p_id) {
        boolean contains = false;
        ggT_Prozess temp = this.head;
        String temp_id = temp.getId();
        String id = this.tail.getId();

        // prueft ob process Teil der liste ist.
        while (!temp_id.equals(id)) {
            if (temp_id.equals(p_id)) {
                contains = true;
            }

            temp = temp.getRechterNachbar();
            temp_id = temp.getId();
        }

        if (temp_id.equals(p_id)) {
            contains = true;
        }

        return contains;
    }

    public String[] getStarterListe() {
        String[] liste = new String[starterMap.size()];
        int i = 0;
        for (String it : starterMap.keySet()) {
            liste[i] = it;
            i++;
        }

        return liste;
    }

    public void beendeProzesse() {
        for (String it : this.starterMap.keySet()) {
            this.starterMap.get(it).destroyAll();
        }
    }

    public HashMap<String, Starter> getStarterMap() {
        return starterMap;
    }

    public HashMap<String, ggT_Prozess> getGgT_ProzessMap() {
        return ggT_ProzessMap;
    }

    public void addMax_ggt_prozesse(int max_ggt_prozesse) {
        this.max_ggt_prozesse += max_ggt_prozesse;
    }

    public void clearTerminierungsMap() {
        this.terminierungsMap.clear();
    }

    @Override
    public void setMonitor(Monitor m) {
        this.monitor = m;
    }

    public ggT_Prozess getHead() {
        return head;
    }

    public void exit() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                System.exit(0);
            }
        }).start();
    }

}
