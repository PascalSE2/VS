
module koordinator {
	
	#include "monitor.idl"
	
	enum NachrichtenTyp {START, MARKER, GGT, TERMINIERUNG};
	
	struct Nachricht{
	NachrichtenTyp typ;
	long ggt;
	long sequenz;
	boolean terminierung;
	};

   interface ggT_Prozess {
	void setLinkerNachbar(in ggT_Prozess linker_nachbar);
	void setRechterNachbar(in ggT_Prozess rechter_nachbar);
	ggT_Prozess getLinkerNachbar();
	ggT_Prozess getRechterNachbar();
	void addRechterChannel(in Nachricht msg);
	void addLinkerChannel(in Nachricht msg);
	void set_ggT(in long ggt);
	void setMonitor(in monitor::Monitor m);
	void printErgebnis();
	string getId();
	void exit();
  };
  
  interface Starter {
	void start_ggT_Prozess(in long min_delay, in long max_delay, in long anz);
	void destroy(in long id);
	void destroyAll();
	void exit();
  };
  
  typedef sequence<string> StarterListe;
  
  interface Koordinator {
	exception EKoordinatorInUse{ string s; };
    void ggT_ProzessAnmeldung( in string name_id, in ggT_Prozess p);
    void ggT_ProzessAbmeldung( in string name_id );
	void starterAnmeldung( in string name ,in Starter p);
	void starterAbmeldung( in string name );
	void meldeTerminierungsStatus( in string name_id, in Nachricht msg);
	void startBerechnung(in long min, in long max, in long min_delay, in long max_delay, in long terminierungs_periode, in long ggt) raises( EKoordinatorInUse);
	StarterListe getStarterListe();
	void setMonitor(in monitor::Monitor m);
	void exit();
  };
 
};
